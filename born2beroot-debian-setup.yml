#!/usr/bin/env ansible-playbook
---
- name: 'Born2beroot debian setup'
  hosts: localhost
  connection: local
  gather_facts: no
  become: yes
  tasks:

    - name: 'Update all packages to their latest version'
      ansible.builtin.apt:
        name: "*"
        state: latest
        update_cache: yes
        clean: yes

    - name: 'Install openssh-server package'
      ansible.builtin.apt:
        name: openssh-server

    - name: 'Start and enable ssh service'
      ansible.builtin.service:
        state: started
        enabled: yes
        name: ssh

    - name: 'Set the sshd config settings'
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#+{{ item.key }}"
        line: "{{ item.key }} {{ item.value }}"
      loop:
        - { key: 'Port', value: '4242' }
        - { key: 'PermitRootLogin', value: 'no' }

    - name: 'Restart ssh service'
      ansible.builtin.service:
        name: ssh
        state: restarted

    - name: 'Install ufw package'
      ansible.builtin.apt:
        name: ufw

    - name: 'Setup ufw to allow ssh port and be enabled'
      ansible.builtin.command:
        cmd: "/usr/sbin/ufw {{ item }}"
      loop:
        - 'allow proto tcp to any port 4242 comment "allow-ssh"'
        - '--force enable'

    - name: 'Set hostname'
      ansible.builtin.hostname:
        name: abenamar42

    - name: 'Replace old hostname'
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.1\.1'
        line: "127.0.1.1\tabenamar42"

    - name: 'Udpate password policy to respect 42 guidelines'
      ansible.builtin.command:
        cmd: "/usr/bin/chage -M 30 -m 2 -W 7 {{ item }}"
      loop:
        - 'abenamar'
        - 'root'

    - name: 'Install libpam-cracklib package'
      ansible.builtin.apt:
        name: libpam-cracklib

    - name: 'Edit /etc/pam.d/common-password to respect 42 guidelines'
      ansible.builtin.lineinfile:
        path: /etc/pam.d/common-password
        insertbefore: '^# and here are more per-package modules'
        line: "\npassword required pam_cracklib.so minlen=10 ucredit=-1 lcredit=-1 dcredit=-1 maxrepeat=3 reject_username difok=7 enforce_for_root\n"

    - name: 'Install sudo package'
      ansible.builtin.apt:
        name: sudo

    - name: 'Edit /etc/sudoers'
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        regexp: "^Defaults(\\s+){{ item.key }}"
        insertafter: '^Defaults'
        line: "Defaults\t{{ item.value }}"
      loop:
        - { key: 'passwd_tries', value: 'passwd_tries=3' }
        - { key: 'badpass_message', value: 'badpass_message="Oh no! You have not really your sudo password, huh ??"' }
        - { key: 'log_input', value: 'log_input' }
        - { key: 'log_output', value: 'log_output' }
        - { key: 'iolog_dir', value: 'iolog_dir="/var/log/sudo"' }
        - { key: 'requiretty', value: 'requiretty' }
        - { key: 'secure_path', value: 'secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"' }

    - name: 'Ensure user42 and sudo group exist'
      ansible.builtin.group:
        name: "{{ item }}"
      loop:
        - 'user42'
        - 'sudo'

    - name: 'Update user to respect to 42 guidelines'
      ansible.builtin.user:
        name: abenamar
        groups: user42,sudo
        password: "{{ 'Dummy1user' | password_hash('sha512') }}"

    - name: 'Update root to respect to 42 guidelines'
      ansible.builtin.user:
        name: root
        password: "{{ 'Dummy1admin' | password_hash('sha512') }}"

    - name: 'Download monitoring.sh'
      ansible.builtin.get_url:
        url: 'https://raw.githubusercontent.com/abdelbenamara/Born2beRoot/main/monitoring.sh'
        dest: '/usr/local/bin/monitoring.sh'
        mode: '0111'

    - name: 'Cron monitoring.sh'
      ansible.builtin.cron:
        name: 'wall monitoring job'
        minute: "*/10"
        job: '/usr/local/bin/monitoring.sh'

    - name: 'Bonus #1 : Install lvm2 package'
      ansible.builtin.apt:
        name: lvm2

    - name: 'Bonus #1 : Resize debian-vg home'
      ansible.builtin.command:
        cmd: "{{ item }}"
      loop:
        - '/usr/bin/umount /home'
        - '/usr/sbin/e2fsck -fy /dev/debian-vg/home'
        - '/usr/sbin/resize2fs /dev/debian-vg/home 300M'
        - '/usr/sbin/lvreduce -f -L 1G /dev/debian-vg/home'
        - '/usr/sbin/resize2fs /dev/debian-vg/home'

    - name: 'Bonus #1 : Create new debian-vg logical volumes'
      ansible.builtin.command:
        cmd: "/usr/sbin/lvcreate -n {{ item.key }} -L {{ item.value }} debian-vg"
      loop:
        - { key: 'var', value: '2G' }
        - { key: 'srv', value: '200M' }
        - { key: 'tmp', value: '700M' }
        - { key: 'var-log', value: '500M' }

    - name: 'Bonus #1 : Create new ext4 filesystems'
      ansible.builtin.command:
        cmd: "/usr/sbin/mkfs.ext4 /dev/debian-vg/{{ item }}"
      loop:
        - 'var'
        - 'srv'
        - 'tmp'
        - 'var-log'

    - name: 'Bonus #1 : Edit /etc/fstab to add new filesystems informations'
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "/dev/debian-vg/{{ item.key }} {{ item.value }} ext4 defaults 1 2"
        backup: yes
      loop:
        - { key: 'var', value: '/var' }
        - { key: 'srv', value: '/srv' }
        - { key: 'tmp', value: '/tmp' }
        - { key: 'var-log', value: '/var/log' }

    - name: 'Bonus #1 : Ensure new mounting points exists'
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        recurse: yes
      loop:
        - '/var'
        - '/srv'
        - '/tmp'
        - '/var/log'

    - name: 'Bonus #1 : Backup data in future mounting points'
      ansible.builtin.command:
        cmd: "/usr/bin/cp -a {{ item }}/. {{ item }}.ori"
      loop:
        - '/var'
        - '/srv'
        - '/tmp'

    - name: 'Bonus #1 : Mount /home, /var, /srv and /tmp filesystems'
      ansible.builtin.command:
        cmd: "/usr/bin/mount {{ item }}"
      loop:
        - '/home'
        - '/var'
        - '/srv'
        - '/tmp'

    - name: 'Bonus #1 : Recover data in /var, /srv and /tmp'
      ansible.builtin.command:
        cmd: "/usr/bin/cp -a {{ item }}.ori/. {{ item }}"
      loop:
        - '/var'
        - '/srv'
        - '/tmp'

    - name: 'Bonus #1 : Mount /var/log filesystem'
      ansible.builtin.command:
        cmd: "/usr/bin/mount /var/log"

    - name: 'Bonus #1 : Recover data in /var/log'
      ansible.builtin.command:
        cmd: "/usr/bin/cp -a /var.ori/log/. /var/log"

    - name: 'Bonus #1 : Delete temporary directories used to mount new filesystems'
      ansible.builtin.file:
        path: "{{ item }}.ori"
        state: absent
      loop:
        - '/var'
        - '/srv'
        - '/tmp'
        
    - name: 'Bonus #2 : Install lighttpd package'
      ansible.builtin.apt:
        name: lighttpd

    - name: 'Bonus #2 : Start and enable lighttpd service'
      ansible.builtin.service:
        state: started
        enabled: yes
        name: lighttpd

    - name: 'Bonus #2 : Install mariadb-server package'
      ansible.builtin.apt:
        name: mariadb-server

    - name: 'Bonus #2 : Start and enable mysql service'
      ansible.builtin.service:
        state: started
        enabled: yes
        name: mysql

    - name: 'Bonus #2 : Secure MariaDB installation and create new database and user for WordPress'
      ansible.builtin.command:
        cmd: "{{ item }}"
      loop:
        - "/usr/bin/mysql -e \"DELETE FROM mysql.user WHERE User='';\""
        - "/usr/bin/mysql -e \"DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\""
        - "/usr/bin/mysql -e 'DROP DATABASE IF EXISTS test;'"
        - "/usr/bin/mysql -e \"DELETE FROM mysql.db WHERE Db='test' OR Db='test\\\\_%';\""
        - "/usr/bin/mysql -e 'CREATE DATABASE wordpress;'"
        - "/usr/bin/mysql -e \"GRANT ALL PRIVILEGES on wordpress.* TO 'wordpress_user'@'localhost' IDENTIFIED BY 'wordpress_pss123';\""
        - "/usr/bin/mysql -e 'FLUSH PRIVILEGES;'"

    - name: 'Restart mysql service'
      ansible.builtin.service:
        name: mysql
        state: restarted

    - name: 'Bonus #2 : Install php7.3 php7.3-fpm php7.3-mysql php7.3-cli php7.3-curl php7.3-xml php-json php-zip php-mbstring php-gd php-intl and php-cgi packages'
      ansible.builtin.apt:
        name: "{{ item }}"
      loop:
        - 'php7.3'
        - 'php7.3-fpm'
        - 'php7.3-mysql'
        - 'php7.3-cli'
        - 'php7.3-curl'
        - 'php7.3-xml'
        - 'php-json'
        - 'php-zip'
        - 'php-mbstring'
        - 'php-gd'
        - 'php-intl'
        - 'php-cgi'

    - name: 'Remove useless packages from the cache'
      ansible.builtin.apt:
        autoclean: yes

    - name: 'Remove dependencies that are no longer required'
      ansible.builtin.apt:
        autoremove: yes
